---
version: '3'

tasks:

  generate-config:
    desc: Generate Talos configuration
    dir: '{{.TALOS_DIR}}'
    cmd: bws run --no-inherit-env -- talhelper genconfig
    preconditions:
      - bws project list
      - test -f {{.TALOS_DIR}}/talconfig.yaml
      - which talhelper

  apply-node:
    desc: Apply Talos config to a node [IP=required]
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper gencommand apply --node {{.IP}} --extra-flags '--mode={{.MODE}}' | bash
    vars:
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which talhelper talosctl yq

  upgrade-node:
    desc: Upgrade Talos on a single node [IP=required]
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper gencommand upgrade --node {{.IP}} --extra-flags "--image='{{.TALOS_IMAGE}}:{{.TALOS_VERSION}}' --timeout=10m" | bash
    vars:
      TALOS_IMAGE:
        sh: yq '.nodes[] | select(.ipAddress == "{{.IP}}") | .talosImageURL' {{.TALOS_DIR}}/talconfig.yaml
      TALOS_VERSION:
        sh: yq '.talosVersion' {{.TALOS_DIR}}/talenv.yaml
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which kubectl talhelper talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper gencommand upgrade-k8s --extra-flags "--to '{{.KUBERNETES_VERSION}}'" | bash
    vars:
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALOS_DIR}}/talenv.yaml
    preconditions:
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which talhelper talosctl yq

  reboot-node:
    desc: Reboot Talos on a single node [NODE=required] [MODE={{.MODE}}]
    cmd: talosctl --nodes {{.NODE}} reboot --mode={{.MODE}}
    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reset-node:
    desc: Reset Talos on a single node [NODE=required]
    dir: '{{.TALOS_DIR}}'
    prompt: Reset Talos node '{{.NODE}}' ... continue?
    cmd: talhelper gencommand reset --nodes {{.NODE}} --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talhelper
      - which talosctl

  reset-cluster:
    desc: Resets nodes back to maintenance mode
    dir: '{{.TALOS_DIR}}'
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: talhelper gencommand reset --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash
    preconditions:
      - which talhelper

  generate-kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  generate-iso:
    desc: Generate a Talos ISO for a specific version [VERSION=required]
    cmd: |-
      curl -L -o {{.TALOS_DIR}}/talos-{{.VERSION}}.iso \
        https://factory.talos.dev/image/{{.TALOS_SCHEMATIC}}/{{.VERSION}}/metal-amd64.iso
    vars:
      TALOS_SCHEMATIC:
        sh: task --silent talos:generate-schematic ISO=true
    requires:
      vars: [VERSION]
    preconditions:
      - which curl task

  generate-schematic:
    desc: Generate a Talos schematic
    cmd: |-
      minijinja-cli {{.TALOS_DIR}}/schematic.yaml.j2 \
        | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
        | jq --raw-output '.id'
    env:
      ISO: '{{.ISO | default "false"}}'
    preconditions:
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which curl jq minijinja-cli
